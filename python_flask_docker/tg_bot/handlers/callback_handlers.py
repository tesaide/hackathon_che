from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import CallbackContext
from utils.helpers import sanitize_callback_data, get_original_category, get_original_object
from data.categories import categories, options
from config import user_selections, STATE_WAITING_FOR_LOCATION, STATE_SELECTING_OPTIONS, STATE_WAITING_FOR_PHOTO

async def button_handler(update: Update, context: CallbackContext) -> None:
    """Handle callback button presses"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # Main menu options
    if query.data == 'faq':
        await query.message.reply_text(
            "üìö –ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è\n\n"
            "1. –©–æ —Ç–∞–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å?\n"
            "   –î–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å - —Ü–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –±–µ–∑–ø–µ—Ä–µ—à–∫–æ–¥–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ –ª—é–¥—å–º–∏ –∑ —ñ–Ω–≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—é\n\n"
            "2. –Ø–∫ —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?\n"
            "   –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –æ–±'—î–∫—Ç—ñ–≤ —É –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ\n\n"
            "3. –î–µ —è –º–æ–∂—É –ø–æ–±–∞—á–∏—Ç–∏ –∫–∞—Ä—Ç—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ?\n"
            "   –í–∏–±—Ä–∞–≤—à–∏ –æ–ø—Ü—ñ—é '–ú–∞–ø–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ' –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é"
        )
        
    elif query.data == 'map':
        await query.message.reply_text(
            "üó∫Ô∏è –ú–∞–ø–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ\n\n"
            "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É –∫–∞—Ä—Ç—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –º–æ–∂–Ω–∞ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: https://example.com/map\n\n"
            "–ù–∞ –∫–∞—Ä—Ç—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—ñ –≤—Å—ñ –æ–±'—î–∫—Ç–∏, —è–∫—ñ –±—É–ª–∏ –¥–æ–¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ –∑ –≤—ñ–¥–º—ñ—Ç–∫–æ—é –ø—Ä–æ —ó—Ö –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å",
            disable_web_page_preview=True
        )
        
    elif query.data == 'add_object':
        keyboard = []
        for category in categories:
            keyboard.append([
                InlineKeyboardButton(
                    category, 
                    callback_data=f'category|{sanitize_callback_data(category)}'
                )
            ])
        
        await query.message.reply_text(
            "üè¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±'—î–∫—Ç–∞\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –æ–±'—î–∫—Ç–∞, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    # Category selection
    elif query.data.startswith('category|'):
        parts = query.data.split('|')
        if len(parts) == 2:
            sanitized_category = parts[1]
            category = get_original_category(sanitized_category, categories)
            
            if category:
                keyboard = []
                for obj_code, obj_name in categories[category]["objects"].items():
                    keyboard.append([
                        InlineKeyboardButton(
                            f"{obj_code}: {obj_name}", 
                            callback_data=f'object|{sanitize_callback_data(category)}|{sanitize_callback_data(obj_code)}'
                        )
                    ])
                
                await query.message.reply_text(
                    f"üìã {category}\n\n"
                    f"{categories[category]['description']}\n\n"
                    "–û–±–µ—Ä—ñ—Ç—å –æ–±'—î–∫—Ç —É —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await query.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è.")
        else:
            await query.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")

    # Object selection
    elif query.data.startswith('object|'):
        parts = query.data.split('|')
        if len(parts) == 3:
            sanitized_category = parts[1]
            sanitized_object = parts[2]
            
            category = get_original_category(sanitized_category, categories)
            if category:
                object_code = get_original_object(category, sanitized_object, categories)
                
                if object_code:
                    object_name = categories[category]["objects"][object_code]
                    
                    user_selections[user_id] = {
                        'state': STATE_WAITING_FOR_LOCATION,
                        'category': category,
                        'object_code': object_code,
                        'object_name': object_name,
                        'location': None,
                        'options': [],
                        'photo': None,
                        'options_message_id': None
                    }
                    
                    await query.message.reply_text(
                        f"‚úÖ –û–±'—î–∫—Ç –æ–±—Ä–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ\n\n"
                        f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n"
                        f"–û–±'—î–∫—Ç: {object_code} - {object_name}\n\n"
                        "–¢–µ–ø–µ—Ä –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ –æ–±'—î–∫—Ç–∞."
                    )
                    
                    # Allow custom location input
                    keyboard = [
                        [InlineKeyboardButton("üìç –ú–æ—è –ø–æ—Ç–æ—á–Ω–∞ –ª–æ–∫–∞—Ü—ñ—è", callback_data='current_location')],
                        [InlineKeyboardButton("üìå –í–∫–∞–∑–∞—Ç–∏ —ñ–Ω—à—É –ª–æ–∫–∞—Ü—ñ—é", callback_data='custom_location')]
                    ]
                    await query.message.reply_text(
                        "–í–∏–±–µ—Ä—ñ—Ç—å, —è–∫ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –æ–±'—î–∫—Ç–∞:",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                else:
                    await query.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ–¥–æ–º–∏–π –æ–±'—î–∫—Ç.")
            else:
                await query.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è.")
        else:
            await query.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É –æ–±'—î–∫—Ç–∞.")

    # Location selection methods
    elif query.data == 'current_location':
        if user_id in user_selections and user_selections[user_id]['state'] == STATE_WAITING_FOR_LOCATION:
            keyboard = [
                [KeyboardButton("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)]
            ]
            await query.message.reply_text(
                "üìå –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó\n\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤–æ—î –ø–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è.\n"
                "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—è –±—ñ–ª—è –æ–±'—î–∫—Ç–∞, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏.",
                reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            )
        else:
            await query.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –æ–±'—î–∫—Ç.")
            
    elif query.data == 'custom_location':
        if user_id in user_selections and user_selections[user_id]['state'] == STATE_WAITING_FOR_LOCATION:
            await query.message.reply_text(
                "üìå –í–∫–∞–∑–∞–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó\n\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ–±'—î–∫—Ç–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
                "latitude, longitude\n\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 50.4501, 30.5234\n\n"
                "–ê–±–æ –∑–Ω–∞–π–¥—ñ—Ç—å –æ–±'—î–∫—Ç –Ω–∞ Google Maps —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏."
            )
            # Set state to handle text input of coordinates
            user_selections[user_id]['state'] = STATE_WAITING_FOR_LOCATION
            # Store a flag to indicate waiting for text coordinates
            user_selections[user_id]['waiting_for_text_location'] = True
        else:
            await query.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –æ–±'—î–∫—Ç.")

    # Option selection
    elif query.data.startswith('option_'):
        if user_id in user_selections and user_selections[user_id]['state'] == STATE_SELECTING_OPTIONS:
            option = query.data[len('option_'):]
            
            # Toggle option selection
            if option in user_selections[user_id]['options']:
                user_selections[user_id]['options'].remove(option)
            else:
                user_selections[user_id]['options'].append(option)
            
            # Build keyboard with all options, highlighting selected ones
            options_list = list(options.keys())
            keyboard = []
            for i in range(0, len(options_list), 5):
                row = []
                for option_code in options_list[i:i+5]:
                    option_text = option_code
                    if option_code in user_selections[user_id]['options']:
                        option_text = f"‚úÖ {option_code}"
                    row.append(InlineKeyboardButton(
                        option_text, 
                        callback_data=f'option_{option_code}'
                    ))
                keyboard.append(row)
            
            keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data='finish_selection')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Create options info text
            if user_selections[user_id]['options']:
                selected_options_text = "\n".join([
                    f"‚úÖ {opt}: {options[opt]}" 
                    for opt in user_selections[user_id]['options']
                ])
                options_message = f"üîç –í–∏–±—Ä–∞–Ω—ñ –æ–ø—Ü—ñ—ó –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ:\n\n{selected_options_text}"
            else:
                options_message = "üîç –ü–æ–∫–∏ —â–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ—ó –æ–ø—Ü—ñ—ó –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ"
            
            # Edit the existing message if we have its ID, otherwise send a new one
            if user_selections[user_id].get('options_message_id'):
                try:
                    await context.bot.edit_message_text(
                        chat_id=query.message.chat_id,
                        message_id=user_selections[user_id]['options_message_id'],
                        text=f"{options_message}\n\n–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—ó –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä':",
                        reply_markup=reply_markup
                    )
                except Exception as e:
                    # If editing fails, send a new message
                    message = await query.message.reply_text(
                        f"{options_message}\n\n–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—ó –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä':",
                        reply_markup=reply_markup
                    )
                    user_selections[user_id]['options_message_id'] = message.message_id
            else:
                # Send a new message and save its ID
                message = await query.message.reply_text(
                    f"{options_message}\n\n–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—ó –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä':",
                    reply_markup=reply_markup
                )
                user_selections[user_id]['options_message_id'] = message.message_id
        else:
            await query.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –æ–±'—î–∫—Ç —ñ –ª–æ–∫–∞—Ü—ñ—é.")

    # Finish option selection
    elif query.data == 'finish_selection':
        if user_id in user_selections and user_selections[user_id]['state'] == STATE_SELECTING_OPTIONS:
            user_selections[user_id]['state'] = STATE_WAITING_FOR_PHOTO
            
            if user_selections[user_id]['options']:
                selected_options_text = "\n".join([
                    f"‚úÖ {opt}: {options[opt]}" 
                    for opt in user_selections[user_id]['options']
                ])
            else:
                selected_options_text = "–ñ–æ–¥–Ω–æ—ó –æ–ø—Ü—ñ—ó –Ω–µ –≤–∏–±—Ä–∞–Ω–æ"
            
            await query.message.reply_text(
                f"‚úÖ –í–∏–±—ñ—Ä –æ–ø—Ü—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n\n"
                f"–í–∏–±—Ä–∞–Ω—ñ –æ–ø—Ü—ñ—ó:\n{selected_options_text}\n\n"
                "–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –æ–±'—î–∫—Ç–∞."
            )
        else:
            await query.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –æ–±'—î–∫—Ç —ñ –ª–æ–∫–∞—Ü—ñ—é.")